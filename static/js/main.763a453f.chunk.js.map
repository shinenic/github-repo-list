{"version":3,"sources":["reducer/index.js","action/index.js","component/List.js","component/App.js","serviceWorker.js","index.js"],"names":["initState","data","currentCount","list","combineReducers","root","state","action","type","length","Object","assign","slice","result","payload","reverse","map","value","obj","name","description","html_url","updated_at","language","homepage","push","loadMore","getDataFromGithub","axios","get","List","container","document","querySelector","addEventListener","scrollTop","clientHeight","scrollHeight","props","removeEventListener","className","this","index","key","replace","href","target","rel","Component","connect","actions","App","Boolean","window","location","hostname","match","store","createStore","Reducer","applyMiddleware","reduxPromise","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.763a453f.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nconst initState = {\r\n  data: [],\r\n  currentCount: 4,\r\n  list: []\r\n}\r\nconst reducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'LOAD_MORE':\r\n      const length = state.data.length\r\n      return Object.assign({}, state, {\r\n        list: state.data.slice(0, state.currentCount + 2 >= length ? length : state.currentCount + 2),\r\n        currentCount: state.currentCount + 2 >= length ? length : state.currentCount + 2\r\n      })\r\n    case 'GET_DATA_FROM_GITHUB':\r\n      let result = []\r\n      const data = action.payload.data.reverse()\r\n      data.map(value => {\r\n        const obj = {\r\n          name: value.name,\r\n          description: value.description,\r\n          html_url: value.html_url,\r\n          updated_at: value.updated_at,\r\n          language: value.language,\r\n          homepage: value.homepage\r\n        }\r\n        return result.push(obj)\r\n      })\r\n      return Object.assign({}, state, {\r\n        data: result,\r\n        list: result.slice(0, state.currentCount)\r\n      })\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default combineReducers({\r\n  root: reducer\r\n})\r\n","import axios from 'axios'\r\n\r\nexport const loadMore = () => {\r\n  return {\r\n    type: 'LOAD_MORE',\r\n    payload: null\r\n  }\r\n}\r\n\r\nexport const getDataFromGithub = () => {\r\n  const res = axios.get('https://api.github.com/users/shinenic/repos')\r\n  return {\r\n    type: 'GET_DATA_FROM_GITHUB',\r\n    payload: res\r\n  }\r\n}","import React, { Component } from 'react'\nimport '../styles/List.scss'\nimport * as actions from '../action'\nimport { connect } from 'react-redux'\n\nclass List extends Component {\n  componentDidMount() {\n    const container = document.querySelector('.list-container')\n    container.addEventListener('scroll', () => {\n      if (container.scrollTop + container.clientHeight >= container.scrollHeight - 2) {\n        this.props.loadMore()\n      }\n    })\n  }\n  componentWillUnmount() {\n    const container = document.querySelector('.list-container')\n    container.removeEventListener('scroll', () => {\n      if (container.scrollTop + container.clientHeight >= container.scrollHeight - 2) {\n        this.props.loadMore()\n      }\n    })\n  }\n  render() {\n    return (\n      <div className=\"list-container\">\n        {this.props.list.length !== 0 && this.props.list.map((value, index) => {\n          return (\n            <div className=\"list-container__list\" key={index}>\n              <div className=\"name\">{value.name}</div>\n              <div className=\"line\">\n                <div className=\"black-line\" />\n              </div>\n              <div className=\"description\">{value.description === null ? 'no description for this repository' : value.description}</div>\n              <div className=\"update\">{value.updated_at.replace(/[TZ]/g,' ')}</div>\n              <div className=\"language\">\n                {value.language !== null &&\n                  <div className=\"language__tag\">{value.language}</div>}\n              </div>\n              <div className=\"link\">\n                <a href={value.html_url} target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n                {value.homepage !== null && <a href={value.homepage} target=\"_blank\" rel=\"noopener noreferrer\">HomePage</a>}\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    data: state.root.data,\n    list: state.root.list\n  }\n}\n\n\nexport default connect(mapStateToProps, actions)(List)","import React, { Component } from 'react'\nimport * as actions from '../action'\nimport { connect } from 'react-redux'\nimport List from './List'\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.getDataFromGithub()\n  }\n  render() {\n    return (\n      <List />\n    )\n  }\n}\n\nexport default connect(null, actions)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxPromise from 'redux-promise';\nimport Reducer from './reducer'\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nlet store = createStore(Reducer, applyMiddleware(reduxPromise))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}